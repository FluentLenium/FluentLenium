# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches: [ develop ]

env:
  MAVEN_OPTS: "-Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Didea.ignore.disabled.plugins=true -Didea.home.path=/tmp"

jobs:
  check-env:
    runs-on: ubuntu-latest
    outputs:
      repo-token-available: ${{ steps.repo-token.outputs.defined }}
    steps:
      - id: repo-token
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        if: "${{ env.REPO_TOKEN != '' }}"
        run: echo "defined=true" >> "$GITHUB_OUTPUT"

  java11-build:
    needs: [ check-env ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'
          cache: "maven"
      - name: Java 11 - unit & integration tests code coverage
        run: |
          ./mvnw -T 1C -B -Pjava11 -Dfailsafe.rerunFailingTestsCount=1 clean verify jacoco:report
      - name: Publish Test reports
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          check_name: Java 11 Test Reports
          report_paths: '**/target/*-reports/TEST-*.xml'
      - name: Coveralls report
        if: needs.check-env.outputs.repo-token-available == 'true'
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          ./mvnw -B -Pjava11 -DrepoToken=$REPO_TOKEN coveralls:report

  java17-build:
    needs: [ check-env ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
          cache: "maven"
      - name: Java 17 - unit & integration tests code coverage
        run: |
          ./mvnw -T 1C -B -Pjava17 -Dfailsafe.rerunFailingTestsCount=1 clean verify jacoco:report
      - name: Publish Test reports
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          check_name: Java 17 Test Reports
          report_paths: '**/target/*-reports/TEST-*.xml'
      - name: Coveralls report
        if: needs.check-env.outputs.repo-token-available == 'true'
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          ./mvnw -B -Pjava17 -DrepoToken=$REPO_TOKEN coveralls:report

  java17-parallelism-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
          cache: "maven"

      - name: determine Fluentlenium version
        uses: ./.github/actions/determine-fluentlenium-version

      - name: Java 17 - unit & integration tests
        run: ./mvnw -Dit.project.version=$FLUENTLENIUM_VERSION -B -Pframework-integration-tests,java17 -pl '!fluentlenium-integration-tests,!fluentlenium-kotest,!fluentlenium-kotest-assertions,!fluentlenium-cucumber,!fluentlenium-spock,!fluentlenium-coverage-report,!fluentlenium-spring-testng' clean test -Dtest=*/it/* -Dsurefire.failIfNoSpecifiedTests=false

      - name: Publish Test reports
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          check_name: Java 17 Parallelism Test Reports
          report_paths: '**/target/*-reports/TEST-*.xml'

  java17-javadoc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
          cache: "maven"
      - name: Java 17 - JavaDoc
        run: ./mvnw -B -Pjava17 javadoc:aggregate

  compile-gradle-example:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
          cache: "maven"
      - name: Install Fluentlenium
        uses: ./.github/actions/fluentlenium-maven-install
      - name: determine Fluentlenium version
        uses: ./.github/actions/determine-fluentlenium-version
      - name: FluentLenium version
        run: echo $FLUENTLENIUM_VERSION
      - name: Compile gradle example
        run: cd examples/quickstart-firefox && ./gradlew compileTestKotlin -Pfluentlenium.version=$FLUENTLENIUM_VERSION
      - name: Run gradle kotest example
        run: cd examples/kotest && ./gradlew  check -Pfluentlenium.version=$FLUENTLENIUM_VERSION

      - name: Publish Test reports
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          check_name: Gradle Kotest examples Test Reports
          report_paths: '**/build/test-results/test/TEST-*.xml'


  compile-maven-examples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
          cache: "maven"
      - name: Install Fluentlenium
        uses: ./.github/actions/fluentlenium-maven-install
      - name: Compile maven examples
        run: ./mvnw -B -nsu -Pexamples clean test-compile

  safari-example:
    runs-on: macos-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Install Fluentlenium
        uses: ./.github/actions/fluentlenium-maven-install

      - name: Enable Safari Driver
        run: |
            # Workaround for `sudo safardriver --enable` not working:
            # https://github.com/web-platform-tests/wpt/issues/19845
            # https://github.com/web-platform-tests/wpt/blob/master/tools/ci/azure/install_safari.yml
            mkdir -p ~/Library/WebDriver/
            curl https://raw.githubusercontent.com/web-platform-tests/wpt/master/tools/ci/azure/com.apple.Safari.plist -o ~/Library/WebDriver/com.apple.Safari.plist
            defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically 1
            # sudo safaridriver --enable

      - name: Compile maven examples
        run: ./mvnw -B -nsu -Pexamples -pl examples/quickstart-safari verify

      - name: Upload reports
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: 'quickstart-safari'
          report_paths: '**/target/*-reports/TEST-*.xml'
